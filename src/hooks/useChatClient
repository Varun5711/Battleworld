"use client";

import { useEffect, useState } from "react";
import { StreamChat } from "stream-chat";
import { useUser } from "@clerk/nextjs";
import { streamTokenProvider } from "../actions/stream.actions";
import { upsertStreamUser } from "../lib/upsertStreamUser";

const client = StreamChat.getInstance(process.env.NEXT_PUBLIC_STREAM_API_KEY!);

export function useChatClient(targetUser: { id: string; name: string; image?: string }) {
  const { user, isLoaded } = useUser();
  const [isConnected, setIsConnected] = useState(false);
  const [channel, setChannel] = useState<any>(null);

  useEffect(() => {
    let isMounted = true;

    async function initChat() {
      if (!isLoaded || !user || isConnected || !targetUser?.id) return;

      try {
        const token = await streamTokenProvider();

        // 1️⃣ Connect the current user (frontend-safe)
        await client.connectUser(
          {
            id: user.id,
            name: user.fullName || user.username || "Unnamed",
            image: user.imageUrl,
          },
          token
        );

        // 2️⃣ Upsert the OTHER user securely on the backend
        await upsertStreamUser({
          id: targetUser.id,
          name: targetUser.name,
          image: targetUser.image,
        });

        // 3️⃣ Create a hashed channel ID (to keep under 64 chars)
        const channelId = [user.id, targetUser.id].sort().join("-");
        const newChannel = client.channel("messaging", channelId, {
          members: [user.id, targetUser.id],
        });

        await newChannel.watch();

        if (isMounted) {
          setChannel(newChannel);
          setIsConnected(true);
        }
      } catch (err) {
        console.error("❌ Chat connection error:", err);
      }
    }

    initChat();

    return () => {
      isMounted = false;
      if (isConnected) {
        client.disconnectUser();
      }
    };
  }, [user, isConnected, isLoaded, targetUser]);

  return { client: isConnected ? client : null, channel };
}